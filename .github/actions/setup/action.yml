name: "Setup Environment"
description: "Sets up the environment with yarn, Node.js, turbo, and Compact compiler"

inputs:
  skip-compact:
    description: "Skip Compact compiler installation"
    required: false
    default: "false"

outputs:
  compact-home:
    description: "Path to Compact compiler installation"
    value: ${{ steps.compact-outputs.outputs.compact-home }}
  compact-version:
    description: "Installed Compact compiler version"
    value: ${{ steps.compact-outputs.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Set shared environment variables
      shell: bash
      run: |
        echo "COMPILER_VERSION=0.24.0" >> $GITHUB_ENV
        echo "LANGUAGE_VERSION=0.16.0" >> $GITHUB_ENV

    - name: Get yarn cache directory path
      shell: bash
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Cache turbo build setup
      uses: actions/cache@v4
      with:
        path: .turbo
        key: ${{ runner.os }}-turbo-${{ hashFiles('.turbo/*') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-turbo-${{ hashFiles('.turbo/*') }}

    - name: Cache Compact compiler
      if: inputs.skip-compact != 'true'
      uses: actions/cache@v4
      id: compact-cache
      with:
        path: ~/compactc
        key: compact-compiler-${{ env.COMPILER_VERSION }}-${{ runner.os }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
        cache: "yarn"

    - name: Install dependencies
      shell: bash
      run: yarn install --immutable

    - name: Install Turbo Globally
      shell: bash
      env:
        TURBO_MAJOR_VERSION: 2
        TURBO_TELEMETRY_DISABLED: 1
      run: npm install turbo@${{ env.TURBO_MAJOR_VERSION }} -g

    - name: Install Compact compiler
      if: inputs.skip-compact != 'true' && steps.compact-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail

        COMPACT_HOME="$HOME/compactc"
        COMPACT_ZIP_DIR="$HOME/compactc_download"

        echo "üîß Installing Compact compiler v$COMPILER_VERSION..."

        mkdir -p "$COMPACT_HOME"
        mkdir -p "$COMPACT_ZIP_DIR"

        ZIP_FILE="compactc_v${COMPILER_VERSION}_x86_64-unknown-linux-musl.zip"
        DOWNLOAD_URL="https://d3fazakqrumx6p.cloudfront.net/artifacts/compiler/compactc_${COMPILER_VERSION}/${ZIP_FILE}"

        echo "‚¨áÔ∏è Downloading Compact compiler from $DOWNLOAD_URL..."
        curl -fLs "$DOWNLOAD_URL" -o "$COMPACT_ZIP_DIR/compactc.zip"

        echo "üß™ Validating ZIP archive..."
        if ! unzip -tq "$COMPACT_ZIP_DIR/compactc.zip"; then
          echo "::error::‚ùå ZIP file is invalid or corrupted."
          exit 1
        fi

        echo "üì¶ Extracting Compact compiler..."
        unzip -q "$COMPACT_ZIP_DIR/compactc.zip" -d "$COMPACT_HOME"
        chmod +x "$COMPACT_HOME"/{compactc,compactc.bin,zkir}

        echo "‚úÖ Compact compiler extracted to $COMPACT_HOME"

    - name: Setup Compact environment
      if: inputs.skip-compact != 'true'
      shell: bash
      run: |
        COMPACT_HOME="$HOME/compactc"
        echo "üìÅ Setting Compact environment variables..."
        echo "COMPACT_HOME=$COMPACT_HOME" >> "$GITHUB_ENV"
        echo "$COMPACT_HOME" >> "$GITHUB_PATH"

        if [ -f "$COMPACT_HOME/compactc" ]; then
          echo "‚úÖ Compact compiler is installed at $COMPACT_HOME"
        else
          echo "::error::‚ùå Compact compiler not found in $COMPACT_HOME"
          exit 1
        fi

    - name: Set Compact outputs
      if: inputs.skip-compact != 'true'
      id: compact-outputs
      shell: bash
      run: |
        echo "compact-home=$HOME/compactc" >> $GITHUB_OUTPUT
        echo "version=$COMPILER_VERSION" >> $GITHUB_OUTPUT

    - name: Check compiler and language version
      if: inputs.skip-compact != 'true'
      shell: bash
      run: |
        set -euo pipefail

        echo "üîç Checking Compact compiler version..."
        COMPILER_OUTPUT=$(compactc --version)
        COMPUTED_COMPILER_VERSION=$(echo "$COMPILER_OUTPUT" | grep -oP '\b0\.[0-9]+\.[0-9]+\b' | head -n 1)

        if [ "$COMPUTED_COMPILER_VERSION" != "$COMPILER_VERSION" ]; then
          echo "::error::‚ùå Compiler version mismatch!%0AExpected: $COMPILER_VERSION%0AGot: $COMPUTED_COMPILER_VERSION"
          exit 1
        fi
        echo "‚úÖ Compiler version matches: $COMPUTED_COMPILER_VERSION"

        echo "üîç Checking Compact language version..."
        LANGUAGE_OUTPUT=$(compactc --language-version)
        COMPUTED_LANGUAGE_VERSION=$(echo "$LANGUAGE_OUTPUT" | grep -oP '\b0\.[0-9]+\.[0-9]+\b' | tail -n 1)

        if [ "$COMPUTED_LANGUAGE_VERSION" != "$LANGUAGE_VERSION" ]; then
          echo "::error::‚ùå Language version mismatch!%0AExpected: $LANGUAGE_VERSION%0AGot: $COMPUTED_LANGUAGE_VERSION"
          exit 1
        fi
        echo "‚úÖ Language version matches: $COMPUTED_LANGUAGE_VERSION"
