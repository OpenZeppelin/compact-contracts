// SPDX-License-Identifier: MIT

pragma language_version >= 0.15.0;

/**
 * @module ERC721
 * @description An unshielded ERC721 library.
 *
 * @notice ADD  
 *
 * @notice Further discussion and consideration required:
 *
 * - Consider changing the underscore in the internal methods to `unsafe` or
 * adopting dot notation for prefixing imports.
 * - Revise logic once contract-to-contract interactions are available on midnight.
 * - Consider implementing an introspection mechanism for transfers to contracts.
 * - Standardize which zero address to use (`ZswapCoinPublicKey` or `ContractAddress`).
 */
module ERC721 {
  import CompactStandardLibrary;
  import "../../node_modules/@openzeppelin-midnight/utils/src/Utils" prefix Utils_;

  /// Public state
  export sealed ledger _name: Maybe<Opaque<"string">>;
  export sealed ledger _symbol: Maybe<Opaque<"string">>;
  export ledger _owners: Map<Uint<128>, ZswapCoinPublicKey>;
  export ledger _balances: Map<ZswapCoinPublicKey, Uint<128>>;
  export ledger _tokenApprovals: Map<Uint<128>, ZswapCoinPublicKey>;
  export ledger _operatorApprovals: Map<ZswapCoinPublicKey, Map<ZswapCoinPublicKey, Boolean>>;
  export ledger _tokenURI: Map<Uint<128>, Maybe<Opaque<"string">>>;

  /**
    * @description Initializes the contract by setting the name and symbol.
    *
    * @param name_ - The name of the token.
    * @param symbol_ - The symbol of the token.
    */
  export circuit initializer(
    name_: Maybe<Opaque<"string">>,
    symbol_: Maybe<Opaque<"string">>
  ): [] {
    _name = name_;
    _symbol = symbol_;
  }

  /**
   * @description Returns the token name.
   *
   * @return {Maybe<Opaque<"string">>} - The token name.
   */
  export circuit name(): Maybe<Opaque<"string">> {
    return _name;
  }

  /**
   * @description Returns the symbol of the token.
   *
   * @return {Maybe<Opaque<"string">>} - The token symbol.
   */
  export circuit symbol(): Maybe<Opaque<"string">> {
    return _symbol;
  }


  /**
   * @description Returns the value of tokens owned by `account`.
   *
   * @dev Manually checks if `account` is a key in the map and returns 0 if it is not.
   *
   * @param {account} - The public key to query.
   * @return {Uint<128>} - The account's token balance.
   */
  export circuit balanceOf(account: ZswapCoinPublicKey): Uint<128> {
    const acct = left<ZswapCoinPublicKey, ContractAddress>(account);
    if (!_balances.member(acct)) {
      return 0;
    }

    return _balances.lookup(acct);
  }

  /**
   * @description Returns the owner of the `tokenId` token.
   *
   * @dev Tokens assigned to zero address are considered invalid, and queries about them do throw.
   *
   * @param {tokenId} - The identifier for a token.
   * @return {ZswapCoinPublicKey} - The public key that owns the token.
   */
  export circuit ownerOf(tokenId: Uint<128>): ZswapCoinPublicKey {
    return _requireOwned(tokenId).left;
  }

  /**
   * @description Returns the token URI for the given `tokenId`.
   *
   * @notice Since Midnight does not support native strings and string operations
   * within the Compact language, concatenating a base URI + token ID is not possible
   * like in other NFT implementations. Therefore, we propose the URI storage
   * approach; whereby, NFTs may or may not have unique "base" URIs.
   * It's up to the implementation to decide on how to handle this.
   *
   * @param {tokenId} - The identifier for a token.
   * @returns {Maybe<Opaque<"string">>} - the token id's URI.
   */
  export circuit tokenURI(tokenId: Uint<128>): Maybe<Opaque<"string">> {
    _requireOwned(tokenId);

    return _tokenURI.lookup(tokenId);
  }

  /**
   * @description Add me...
   */
  export circuit approve(
    to: ZswapCoinPublicKey,
    tokenId: Uint<128>
  ): [] {
    // TMP - Waiting for contract-to-contract calls to handle `right` with contract address
    const auth = left<ZswapCoinPublicKey, ContractAddress>(own_public_key());
    _approve(
      left<ZswapCoinPublicKey, ContractAddress>(to), 
      tokenId,
      auth
    );
  }

  /**
   * @description Add me...
   */
  export circuit getApproved(tokenId: Uint<128>): ZswapCoinPublicKey {
    _requireOwned(tokenId);

    return _getApproved(tokenId).left;
  }

  /**
   * @description Add me...
   */
  export circuit setApprovalForAll(
    operator: ZswapCoinPublicKey,
    approved: Boolean
  ): [] {
    const owner = own_public_key();
    _setApprovalForAll(
      owner,
      operator,
      approved
    );
  }

  /**
   * @description Add me...
   */
  export circuit isApprovedForAll(
    owner: ZswapCoinPublicKey,
    operator: ZswapCoinPublicKey
  ): Boolean {
    if (_operatorApprovals.member(owner) && _operatorApprovals.lookup(owner).member(operator)) {
      return _operatorApprovals.lookup(owner).lookup(operator);
    } else {
      return false;
    }
  }

  /**
   * @description Add me...
   */
  export circuit transferFrom(
    from: ZswapCoinPublicKey,
    to: ZswapCoinPublicKey,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";
    // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
    // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.

    const previousOwner = _update(
      to,
      tokenId,
      own_public_key()
    );
    assert previousOwner != from "ERC721: Incorrect Owner";
  }

  /**
   * @description Add me...
   */
  export circuit _requireOwned(tokenId: Uint<128>): ZswapCoinPublicKey {
    assert _owners.member(tokenId) "ERC721: Nonexistent Token";
    const owner = _owners.lookup(tokenId);

    assert !Utils_isKeyOrAddressZero(owner) "ERC721: Invalid Owner";
    return owner;
  }

  /**
   * @description Add me...
   */
  export circuit _ownerOf(tokenId: Uint<128>): ZswapCoinPublicKey {
    if (!_owners.member(tokenId)) {
      _owners.insert(tokenId, burn_address());
    }

    return _owners.lookup(tokenId);
  }

  /**
   * @description Add me...
   */
  export circuit _update(
    to: ZswapCoinPublicKey,
    tokenId: Uint<128>,
    auth: ZswapCoinPublicKey
  ): ZswapCoinPublicKey {
    const from = _ownerOf(tokenId);

    // Perform (optional) operator check
    if (!Utils_isKeyOrAddressZero(auth)) {
        _checkAuthorized(from, auth, tokenId);
    }

    // execute update
    if (!Utils_isKeyOrAddressZero(from)) {
      // assuming burn address == zero address
      // Need to test to confirm
      _approve(burn_address(), tokenId, burn_address());
      const newBalance = _balances.lookup(from) - 1 as Uint<128>;
      _balances.insert(from, newBalance);
    }

    if (!Utils_isKeyOrAddressZero(to)) {
      if (!_balances.member(to)) {
        _balances.insert(to, 0);
      }
      const newBalance = _balances.lookup(to) + 1 as Uint<128>;
      _balances.insert(to, newBalance);
    }

    _owners.insert(tokenId, to);

    return from;
  }

  /**
   * @description Add me...
   */
  export circuit _approve(
    to: ZswapCoinPublicKey,
    tokenId: Uint<128>,
    auth: ZswapCoinPublicKey
  ): [] {
    if (!Utils_isKeyOrAddressZero(auth)) {
      const owner = _requireOwned(tokenId);

      // We do not use _isAuthorized because single-token approvals should not be able to call approve
      assert (!Utils_isKeyOrAddressZero(auth) && owner != auth && !isApprovedForAll(owner, auth)) "ERC721 Invalid Approver";
    }

    _tokenApprovals.insert(tokenId, to);
  }

  /**
   * @description Add me...
   */
  export circuit _checkAuthorized(
    owner: ZswapCoinPublicKey,
    spender: ZswapCoinPublicKey,
    tokenId: Uint<128>
  ): [] {
    if (!_isAuthorized(owner, spender, tokenId)) {
      assert !Utils_isKeyOrAddressZero(owner) "ERC721: Nonexistent Token";
      assert false "ERC721: Insufficient Approval";
    }
  }

  /**
   * @description Add me...
   */
  export circuit _isAuthorized(
    owner: ZswapCoinPublicKey,
    spender: ZswapCoinPublicKey,
    tokenId: Uint<128>
  ): Boolean {
    return (!Utils_isKeyOrAddressZero(spender) && (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender));
  }

  export circuit _getApproved(tokenId: Uint<128>): ZswapCoinPublicKey {
    // I think this returns the 0 address if token doesn't exist
    // Make sure this doesn't cause problem in testing
    return _tokenApprovals.lookup(tokenId);
  }

  /**
   * @description Add me...
   */
  export circuit _setApprovalForAll(
    owner: ZswapCoinPublicKey,
    operator: ZswapCoinPublicKey,
    approved: Boolean
  ): [] {
    assert !Utils_isKeyOrAddressZero(operator) "ERC721: Invalid Operator";

    if (!_operatorApprovals.member(owner)) {
      _operatorApprovals.insert(
        owner,
        default<Map<ZswapCoinPublicKey, Boolean>>
      );
      _operatorApprovals.lookup(owner).insert(operator, approved);
    } else {
      _operatorApprovals.lookup(owner).insert(operator, approved);
    }
  }

  /**
   * @description Add me...
   */
  export circuit _mint(
    to: ZswapCoinPublicKey,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";

    // Assumes burn_address == zero address
    // May want to define as default<ContractAddress>
    const previousOwner = _update(to, tokenId, burn_address());

    assert Utils_isKeyOrAddressZero(previousOwner) "ERC721: Invalid Sender";
  }

  /**
   * @description Add me...
   */
  export circuit _burn(tokenId: Uint<128>): [] {
    const previousOwner = _update(burn_address(), tokenId, burn_address());
    assert !Utils_isKeyOrAddressZero(previousOwner) "ERC721: Invalid Sender";
  }

  /**
   * @description Add me...
   */
  export circuit _transfer(
    from: ZswapCoinPublicKey,
    to: ZswapCoinPublicKey,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";

    const previousOwner = _update(to, tokenId, burn_address());

    assert !Utils_isKeyOrAddressZero(previousOwner) "ERC721: Nonexistent Token";
    assert previousOwner != from "ERC721: Incorrect Owner";
  }

  /**
   * @description Sets the the URI as `tokenURI` for the given `tokenId`.
   * The `tokenId` must exist.
   *
   * @notice The URI for a given NFT is usually set when the NFT is minted.
   *
   * @params {tokenId} - The identifier of the token.
   * @params {tokenURI} - The URI of `tokenId`.
   * @return {[]} - None.
   */
  export circuit _setTokenURI(tokenId: Uint<128>, tokenURI: Maybe<Opaque<"string">>): [] {
    _requireOwned(tokenId);

    return _tokenURI.insert(tokenId, tokenURI);
  }
}

