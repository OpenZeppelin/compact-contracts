// SPDX-License-Identifier: MIT

pragma language_version >= 0.15.0;

/**
 * @module ERC721
 * @description An unshielded ERC721 library.
 *
 * @notice One notable difference regarding this implementation and the EIP20 spec
 * consists of the token size. Uint<128> is used as the token size because Uint<256>
 * cannot be supported.
 * This is due to encoding limits on the midnight circuit backend:
 * https://github.com/midnightntwrk/compactc/issues/929
 *
 * @notice Further discussion and consideration required:
 *
 * - Consider changing the underscore in the internal methods to `unsafe` or
 * adopting dot notation for prefixing imports.
 * - Revise logic once contract-to-contract interactions are available on Midnight.
 * - Revise logic once events are available on Midnight.
 * - Consider implementing an introspection mechanism for transfers to contracts.
 */

/**
 * The owner of a non-fungible token
 * @typedef {Either<ZswapCoinPublicKey, ContractAddress>} Owner
 */

/**
 * The token identifier of a non-funglible token
 * @typedef {Uint<128>} TokenId
 */

/**
 * An account authorized to manage a non-fungible token 
 * @typedef {Either<ZswapCoinPublicKey, ContractAddress>} Operator
 */
module ERC721 {
  import CompactStandardLibrary;
  import "../../node_modules/@openzeppelin-midnight/utils/src/Utils" prefix Utils_;

  /// Public state
  export sealed ledger _name: Opaque<"string">;
  export sealed ledger _symbol: Opaque<"string">;
  export ledger _owners: Map<Uint<128>, Either<ZswapCoinPublicKey, ContractAddress>>;
  export ledger _balances: Map<Either<ZswapCoinPublicKey, ContractAddress>, Uint<128>>;
  export ledger _tokenApprovals: Map<Uint<128>, Either<ZswapCoinPublicKey, ContractAddress>>;
  export ledger _operatorApprovals: Map<Either<ZswapCoinPublicKey, ContractAddress>, Map<Either<ZswapCoinPublicKey, ContractAddress>, Boolean>>;
  export ledger _tokenURIs: Map<Uint<128>, Opaque<"string">>;

  /**
   * @description Initializes the contract by setting the name and symbol.
   *
   * @param {Opaque<"string">} name_ - The name of the token.
   * @param {Opaque<"string">} symbol_ - The symbol of the token.
   * @return {[]} - None.
   */
  export circuit initialize(
    name_: Opaque<"string">,
    symbol_: Opaque<"string">
  ): [] {
    _name = name_;
    _symbol = symbol_;
  }

  /**
   * @description Returns the number of tokens in `owner`'s account.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>)} owner - The account to query.
   * @return {Uint<128>} - The number of tokens in `owner`'s account.
   */
  export circuit balanceOf(owner: Either<ZswapCoinPublicKey, ContractAddress>): Uint<128> {
    if (!_balances.member(owner)) {
      return 0;
    }

    return _balances.lookup(owner);
  }

  /**
   * @description Returns the owner of the `tokenId` token.
   *
   * @param {Uint<128>} tokenId - The identifier for a token.
   * @return {Either<ZswapCoinPublicKey, ContractAddress>} - The account that owns the token.
   */
  export circuit ownerOf(tokenId: Uint<128>): Either<ZswapCoinPublicKey, ContractAddress> {
    return _requireOwned(tokenId);
  }

  /**
   * @description Returns the token name.
   *
   * @return {Opaque<"string">} - The token name.
   */
  export circuit name(): Opaque<"string"> {
    return _name;
  }

  /**
   * @description Returns the symbol of the token.
   *
   * @return {Opaque<"string">} - The token symbol.
   */
  export circuit symbol(): Opaque<"string"> {
    return _symbol;
  }

  /**
   * @description Returns the token URI for the given `tokenId`.
   *
   * @notice Midnight does not support native strings and string operations
   * within the Compact language, eg concatenating a base URI + token ID, are not possible
   * like in other NFT implementations. Therefore, we propose the URI storage
   * approach; whereby, NFTs may or may not have unique "base" URIs.
   * It's up to the implementation to decide on how to handle this.
   *
   * @param {Uint<128>} tokenId - The identifier for a token.
   * @returns {Opaque<"string">} - the token id's URI.
   */
  export circuit tokenURI(tokenId: Uint<128>): Opaque<"string"> {
    _requireOwned(tokenId);

    return _tokenURIs.lookup(tokenId);
  }

  /**
   * @description Sets the the URI as `tokenURI` for the given `tokenId`.
   * The `tokenId` must exist.
   *
   * @notice The URI for a given NFT is usually set when the NFT is minted.
   *
   * @param {Uint<128>} tokenId - The identifier of the token.
   * @param {Opaque<"string">} tokenURI - The URI of `tokenId`.
   * @return {[]} - None.
   */
  export circuit _setTokenURI(tokenId: Uint<128>, tokenURI: Opaque<"string">): [] {
    _requireOwned(tokenId);

    return _tokenURIs.insert(tokenId, tokenURI);
  }

  /**
   * @description Gives permission to `to` to transfer `tokenId` token to another account.
   * The approval is cleared when the token is transferred.
   *
   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
   *
   * Requirements:
   *
   * - The caller must own the token or be an approved operator.
   * - `tokenId` must exist.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The account receiving the approval
   * @param {Uint<128>} tokenId - The token `to` may be permitted to transfer
   * @return {[]} - None.
   */
  export circuit approve(
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    const auth = left<ZswapCoinPublicKey,ContractAddress>(own_public_key());
    _approve(
      to,
      tokenId,
      auth
    );
  }

  /**
   * @description Returns the account approved for `tokenId` token.
   * 
   * @param {Uint<128>} tokenId - The token an account may be approved to manage
   * @return {Either<ZswapCoinPublicKey, ContractAddress>} Operator- The account approved to manage the token
   */
  export circuit getApproved(tokenId: Uint<128>): Either<ZswapCoinPublicKey, ContractAddress> {
    _requireOwned(tokenId);

    return _getApproved(tokenId);
  }

  /**
   * @description Approve or remove `operator` as an operator for the caller.
   * Operators can call {transferFrom} for any token owned by the caller.
   *
   * Requirements:
   *
   * - The `operator` cannot be the address zero.
   * 
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} operator - An operator to manage the caller's tokens
   * @param {Boolean} approved - A boolean determining if `operator` may manage all tokens of the caller
   * @return {[]} - None.
   */
  export circuit setApprovalForAll(
    operator: Either<ZswapCoinPublicKey, ContractAddress>,
    approved: Boolean
  ): [] {
    const owner = left<ZswapCoinPublicKey,ContractAddress>(own_public_key());
    _setApprovalForAll(
      owner,
      operator,
      approved
    );
  }

  /**
   * @description Returns if the `operator` is allowed to manage all of the assets of `owner`.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} owner - The owner of a token
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} operator - An account that may operate on `owner`'s tokens
   * @return {Boolean} - A boolean determining if `operator` is allowed to manage all of the tokens of `owner` 
   */
  export circuit isApprovedForAll(
    owner: Either<ZswapCoinPublicKey, ContractAddress>,
    operator: Either<ZswapCoinPublicKey, ContractAddress>
  ): Boolean {
    if (_operatorApprovals.member(owner) && _operatorApprovals.lookup(owner).member(operator)) {
      return _operatorApprovals.lookup(owner).lookup(operator);
    } else {
      return false;
    }
  }

  /**
   * @description Transfers `tokenId` token from `from` to `to`.
   * 
   * Requirements:
   *
   * - `from` cannot be the zero address.
   * - `to` cannot be the zero address or a ContractAddress.
   * - `tokenId` token must be owned by `from`.
   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
   * 
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} from - The source account from which the token is being transfered
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The target account to transfer token to
   * @param {Uint<128>} tokenId - The token being transfered
   * @return {[]} - None.
   */
  export circuit transferFrom(
    from: Either<ZswapCoinPublicKey, ContractAddress>,
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isContractAddress(to) "ERC721: Unsafe Transfer";
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";
    // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
    // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.
    const auth = left<ZswapCoinPublicKey,ContractAddress>(own_public_key());
    const previousOwner = _update(
      to,
      tokenId,
      auth
    );
    assert previousOwner == from "ERC721: Incorrect Owner";
  }

  /**
   * @description Transfers `tokenId` token from `from` to `to`. It does NOT check if the recipient is a ContractAddress.
   * 
   * @notice External smart contracts cannot call the token contract at this time, so any transfers to external contracts
   * may result in a permanent loss of the token. All transfers to external contracts will be permanently "stuck" at the
   * ContractAddress
   *
   * Requirements:
   *
   * - `from` cannot be the zero address.
   * - `to` cannot be the zero address.
   * - `tokenId` token must be owned by `from`.
   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
   * 
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} from - The source account from which the token is being transfered
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The target account to transfer token to
   * @param {Uint<128>} tokenId - The token being transfered
   * @return {[]} - None.
   */
  export circuit _unsafeTransferFrom(
    from: Either<ZswapCoinPublicKey, ContractAddress>,
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";
    // Setting an "auth" arguments enables the `_isAuthorized` check which verifies that the token exists
    // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.
    const auth = left<ZswapCoinPublicKey,ContractAddress>(own_public_key());
    const previousOwner = _update(
      to,
      tokenId,
      auth
    );
    assert previousOwner == from "ERC721: Incorrect Owner";
  }

  /**
   * @description Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist
   *
   * @param {Uint<128>} tokenId - The target token of the owner query
   * @return {Either<ZswapCoinPublicKey, ContractAddress>} - The owner of the token
   */
  export circuit _ownerOf(tokenId: Uint<128>): Either<ZswapCoinPublicKey, ContractAddress> {
    if (!_owners.member(tokenId)) {
      return burn_address();
    }

    return _owners.lookup(tokenId);
  }

  /**
   * @description Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.
   *
   * @param {Uint<128>} tokenId - The token to query
   * @return {Either<ZswapCoinPublicKey, ContractAddress>} - An account approved to spend `tokenId`
   */
  export circuit _getApproved(tokenId: Uint<128>): Either<ZswapCoinPublicKey, ContractAddress> {
    if (!_tokenApprovals.member(tokenId)) {
      return burn_address();
    }
    return _tokenApprovals.lookup(tokenId);
  }

    /**
   * @description Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in
   * particular (ignoring whether it is owned by `owner`).
   *
   * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
   * assumption.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} owner - Owner of the token
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} spender - Account that wishes to spend `tokenId`
   * @param {Uint<128>} tokenId - Token to spend
   * @return {Boolean} - A boolean determining if `spender` may manage `tokenId`
   */
  export circuit _isAuthorized(
    owner: Either<ZswapCoinPublicKey, ContractAddress>,
    spender: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): Boolean {
    return (
      !Utils_isKeyOrAddressZero(spender) && 
      (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender)
    );
  }

  /**
   * @description Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.
   * Reverts if:
   * - `spender` does not have approval from `owner` for `tokenId`.
   * - `spender` does not have approval to manage all of `owner`'s assets.
   *
   * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this
   * assumption.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} owner - Owner of the token
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} spender - Account operating on `tokenId`
   * @param {Uint<128>} tokenId - The token to spend
   * @return {[]} - None.
   */
  export circuit _checkAuthorized(
    owner: Either<ZswapCoinPublicKey, ContractAddress>,
    spender: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    if (!_isAuthorized(owner, spender, tokenId)) {
      assert !Utils_isKeyOrAddressZero(owner) "ERC721: Nonexistent Token";
      assert false "ERC721: Insufficient Approval";
    }
  }

  /**
   * @description Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner
   * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.
   *
   * The `auth` argument is optional. If the value passed is non 0, then this function will check that
   * `auth` is either the owner of the token, or approved to operate on the token (by the owner).
   * 
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The intended recipient of the token transfer
   * @param {Uint<128>} tokenId - The token being transfered
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} auth - An account authorized to transfer the token
   * @return {Either<ZswapCoinPublicKey, ContractAddress>} - Owner of the token before it was transfered
   */
  export circuit _update(
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>,
    auth: Either<ZswapCoinPublicKey, ContractAddress>
  ): Either<ZswapCoinPublicKey, ContractAddress> {
    const from = _ownerOf(tokenId);

    // Perform (optional) operator check
    if (!Utils_isKeyOrAddressZero(auth)) {
        _checkAuthorized(from, auth, tokenId);
    }

    // Execute the update
    if (!Utils_isKeyOrAddressZero(from)) {
      // Clear approval. No need to re-authorize
      _approve(burn_address(), tokenId, burn_address());
      const newBalance = _balances.lookup(from) - 1 as Uint<128>;
      _balances.insert(from, newBalance);
    }

    if (!Utils_isKeyOrAddressZero(to)) {
      if (!_balances.member(to)) {
        _balances.insert(to, 0);
      }
      const newBalance = _balances.lookup(to) + 1 as Uint<128>;
      _balances.insert(to, newBalance);
    }

    _owners.insert(tokenId, to);

    return from;
  }

  /**
   * @description Mints `tokenId` and transfers it to `to`.
   *
   * Requirements:
   *
   * - `tokenId` must not exist.
   * - `to` cannot be the zero address or a ContractAddress.
   * 
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The account receiving `tokenId`
   * @param {Uint<128>} tokenId - The token to transfer
   * @return {[]} - None.
   */
  export circuit _mint(
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isContractAddress(to) "ERC721: Unsafe Transfer";
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";

    const previousOwner = _update(to, tokenId, burn_address());

    assert Utils_isKeyOrAddressZero(previousOwner) "ERC721: Invalid Sender";
  }

  /**
   * @description Mints `tokenId` and transfers it to `to`. It does NOT check if the recipient is a ContractAddress.
   * 
   * @notice External smart contracts cannot call the token contract at this time, so any transfers to external contracts
   * may result in a permanent loss of the token. All transfers to external contracts will be permanently "stuck" at the
   * ContractAddress
   *
   * Requirements:
   *
   * - `tokenId` must not exist.
   * - `to` cannot be the zero address.
   * 
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The account receiving `tokenId`
   * @param {Uint<128>} tokenId - The token to transfer
   * @return {[]} - None.
   */
  export circuit _unsafe_mint(
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";

    const previousOwner = _update(to, tokenId, burn_address());

    assert Utils_isKeyOrAddressZero(previousOwner) "ERC721: Invalid Sender";
  }

  /**
   * @description Destroys `tokenId`.
   * The approval is cleared when the token is burned.
   * This is an internal function that does not check if the sender is authorized to operate on the token.
   *
   * Requirements:
   *
   * - `tokenId` must exist.
   *
   * @param {Uint<128>} tokenId - The token to burn
   * @return {[]} - None.
   */
  export circuit _burn(tokenId: Uint<128>): [] {
    const previousOwner = _update(burn_address(), tokenId, burn_address());
    assert !Utils_isKeyOrAddressZero(previousOwner) "ERC721: Invalid Sender";
  }

  /**
   * @description Transfers `tokenId` from `from` to `to`.
   *  As opposed to {transferFrom}, this imposes no restrictions on own_public_key().
   *
   * Requirements:
   *
   * - `to` cannot be the zero address or a ContractAddress.
   * - `tokenId` token must be owned by `from`.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} from - The source account of the token transfer
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The target account of the token transfer
   * @param {Uint<128>} tokenId - The token to transfer
   * @return {[]} - None.
   */
  export circuit _transfer(
    from: Either<ZswapCoinPublicKey, ContractAddress>,
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isContractAddress(to) "ERC721: Unsafe Transfer";
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";

    const previousOwner = _update(to, tokenId, burn_address());

    assert !Utils_isKeyOrAddressZero(previousOwner) "ERC721: Nonexistent Token";
    assert previousOwner == from "ERC721: Incorrect Owner";
  }

  /**
   * @description Transfers `tokenId` from `from` to `to`.
   * As opposed to {_unsafeTransferFrom}, this imposes no restrictions on own_public_key().
   * It does NOT check if the recipient is a ContractAddress.
   *
   * @notice External smart contracts cannot call the token contract at this time, so any transfers to external contracts
   * may result in a permanent loss of the token. All transfers to external contracts will be permanently "stuck" at the
   * ContractAddress
   *
   * Requirements:
   *
   * - `to` cannot be the zero address.
   * - `tokenId` token must be owned by `from`.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} from - The source account of the token transfer
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The target account of the token transfer
   * @param {Uint<128>} tokenId - The token to transfer
   * @return {[]} - None.
   */
  export circuit _unsafe_transfer(
    from: Either<ZswapCoinPublicKey, ContractAddress>,
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>
  ): [] {
    assert !Utils_isKeyOrAddressZero(to) "ERC721: Invalid Receiver";

    const previousOwner = _update(to, tokenId, burn_address());

    assert !Utils_isKeyOrAddressZero(previousOwner) "ERC721: Nonexistent Token";
    assert previousOwner == from "ERC721: Incorrect Owner";
  }

  /**
   * @description  Approve `to` to operate on `tokenId`
   *
   * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is
   * either the owner of the token, or approved to operate on all tokens held by this owner.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} to - The target account to approve
   * @param {Uint<128>} tokenId - The token to approve
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} auth - An account authorized to operate on all tokens held by the owner the token
   * @return {[]} - None.
   */
  export circuit _approve(
    to: Either<ZswapCoinPublicKey, ContractAddress>,
    tokenId: Uint<128>,
    auth: Either<ZswapCoinPublicKey, ContractAddress>
  ): [] {
    if (!Utils_isKeyOrAddressZero(auth)) {
      const owner = _requireOwned(tokenId);

      // We do not use _isAuthorized because single-token approvals should not be able to call approve
      assert (owner == auth || isApprovedForAll(owner, auth)) "ERC721: Invalid Approver";
    }

    _tokenApprovals.insert(tokenId, to);
  }

  /**
   * @description Approve `operator` to operate on all of `owner` tokens
   *
   * Requirements:
   * - operator can't be the address zero.
   *
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} owner - Owner of a token
   * @param {Either<ZswapCoinPublicKey, ContractAddress>} operator - The account to approve
   * @param {Boolean} approved - A boolean determining if `operator` may operate on all of `owner` tokens 
   * @return {[]} - None.
   */
  export circuit _setApprovalForAll(
    owner: Either<ZswapCoinPublicKey, ContractAddress>,
    operator: Either<ZswapCoinPublicKey, ContractAddress>,
    approved: Boolean
  ): [] {
    assert !Utils_isKeyOrAddressZero(operator) "ERC721: Invalid Operator";

    if (!_operatorApprovals.member(owner)) {
      _operatorApprovals.insert(
        owner,
        default<Map<Either<ZswapCoinPublicKey, ContractAddress>, Boolean>>
      );
    }

    _operatorApprovals.lookup(owner).insert(operator, approved);
  }

  /**
   * @description Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).
   * Returns the owner.
   *
   * Overrides to ownership logic should be done to {_ownerOf}.
   * 
   * @param {Uint<128>} tokenId - The token that should be owned
   * @return {Either<ZswapCoinPublicKey, ContractAddress>} - The owner of `tokenId`
   */
  export circuit _requireOwned(tokenId: Uint<128>): Either<ZswapCoinPublicKey, ContractAddress> {
    const owner = _ownerOf(tokenId);

    assert !Utils_isKeyOrAddressZero(owner) "ERC721: Nonexistent Token";
    return owner;
  }
}

