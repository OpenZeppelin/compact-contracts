// SPDX-License-Identifier: MIT

pragma language_version >= 0.15.0;

import CompactStandardLibrary;
import "../../ZOwnablePK" prefix ZOwnablePK_;

export { ZswapCoinPublicKey, ContractAddress, Either, Maybe };
export { ZOwnablePK__ownerCommitment, ZOwnablePK__counter };

constructor(initOwnerCommitment: Bytes<32>, instanceSalt: Bytes<32>) {
  ZOwnablePK_initialize(initOwnerCommitment, instanceSalt);
}

export circuit owner(): Bytes<32> {
  return ZOwnablePK_owner();
}

export circuit transferOwnership(newOwnerCommitment: Bytes<32>): [] {
  return ZOwnablePK_transferOwnership(disclose(newOwnerCommitment));
}

export circuit renounceOwnership(): [] {
  return ZOwnablePK_renounceOwnership();
}

export circuit assertOnlyOwner(): [] {
  return ZOwnablePK_assertOnlyOwner();
}

export circuit _computeOwnerCommitment(id: Bytes<32>, counter: Uint<64>): Bytes<32> {
  return ZOwnablePK__computeOwnerCommitment(id, counter);
}

export circuit _transferOwnership(newOwnerCommitment: Bytes<32>): [] {
  return ZOwnablePK__transferOwnership(newOwnerCommitment);
}
