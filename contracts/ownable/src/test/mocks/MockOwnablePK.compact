// SPDX-License-Identifier: MIT

pragma language_version >= 0.15.0;

import CompactStandardLibrary;
import "../../OwnablePK" prefix OwnablePK_;

export { ZswapCoinPublicKey, ContractAddress, Either, Maybe };
export { OwnablePK__owner, OwnablePK__pendingOwner, OwnablePK__instance };

constructor(initOwner: ZswapCoinPublicKey) {
  OwnablePK_initializer(initOwner);
}

export circuit owner(): Bytes<32> {
  return OwnablePK_owner();
}

export circuit pendingOwner(): Bytes<32> {
  return OwnablePK_pendingOwner();
}

export circuit transferOwnership(newOwner: ZswapCoinPublicKey): [] {
  return OwnablePK_transferOwnership(disclose(newOwner));
}

export circuit acceptOwnership(): [] {
  return OwnablePK_acceptOwnership();
}

export circuit renounceOwnership(): [] {
  return OwnablePK_renounceOwnership();
}

export circuit assertOnlyOwner(): [] {
  return OwnablePK_assertOnlyOwner();
}

export circuit shieldOwner(ownerPK: ZswapCoinPublicKey, instance: Bytes<32>): Bytes<32> {
  return OwnablePK_shieldOwner(ownerPK, instance);
}

export circuit _transferOwnership(newOwner: Bytes<32>): [] {
  return OwnablePK__transferOwnership(newOwner);
}

export circuit _proposeOwner(newOwner: ZswapCoinPublicKey): [] {
  return OwnablePK__proposeOwner(disclose(newOwner));
}
