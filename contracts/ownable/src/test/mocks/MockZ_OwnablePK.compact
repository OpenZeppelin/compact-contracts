// SPDX-License-Identifier: MIT

pragma language_version >= 0.15.0;

import CompactStandardLibrary;
import "../../Z_OwnablePK" prefix Z_OwnablePK_;

export { ZswapCoinPublicKey, ContractAddress, Either, Maybe };
export { Z_OwnablePK__ownerCommitment, Z_OwnablePK__instance };

constructor(initOwnerCommitment: Bytes<32>) {
  Z_OwnablePK_initialize(initOwnerCommitment);
}

export circuit owner(): Bytes<32> {
  return Z_OwnablePK_owner();
}

export circuit transferOwnership(newOwnerCommitment: Bytes<32>): [] {
  return Z_OwnablePK_transferOwnership(disclose(newOwnerCommitment));
}

export circuit renounceOwnership(): [] {
  return Z_OwnablePK_renounceOwnership();
}

export circuit assertOnlyOwner(): [] {
  return Z_OwnablePK_assertOnlyOwner();
}

export circuit shieldPK(ownerPK: ZswapCoinPublicKey, instance: Uint<64>, nonce: Bytes<32>): Bytes<32> {
  return Z_OwnablePK_shieldPK(ownerPK, instance, nonce);
}

export circuit _transferOwnership(newOwnerCommitment: Bytes<32>): [] {
  return Z_OwnablePK__transferOwnership(newOwnerCommitment);
}
