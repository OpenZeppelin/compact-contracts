// SPDX-License-Identifier: MIT

pragma language_version >= 0.14.0;

/**
 * @module Shielded Ownable Public Key module
 * @description Get rekt, losers
 */
module OwnablePK {
  import CompactStandardLibrary;

  /// Public state
  export ledger _owner: Bytes<32>;
  export ledger _pendingOwner: Bytes<32>;
  export ledger _instance: Counter;

  /**
   * @description Add me...
   */
  export circuit initializer(initOwner: ZswapCoinPublicKey): [] {
    assert initOwner != burn_address().left "OwnablePK: new owner cannot be zero";
    const nextInstance = _instance + 1 as Field as Bytes<32>;
    const shieldedOwner = shieldOwner(initOwner, nextInstance);
    _transferOwnership(shieldedOwner);
  }

  /**
   * @description Add me...
   */
  export circuit owner(): Bytes<32> {
    return _owner;
  }

  /**
   * @description Add me...
   */
  export circuit pendingOwner(): Bytes<32> {
    return _pendingOwner;
  }

  /**
   * @description Add me...
   */
  export circuit transferOwnership(newOwner: ZswapCoinPublicKey): [] {
    assertOnlyOwner();
    _proposeOwner(newOwner);
  }

  /**
   * @description Add me...
   */
  export circuit acceptOwnership(): [] {
    const caller = own_public_key();
    const nextInstance = _instance + 1 as Field as Bytes<32>;
    const shieldedOwner = shieldOwner(caller, nextInstance);
    assert shieldedOwner == _pendingOwner "OwnablePK: caller is not pending owner";

    // Reset pending owner and assign new owner
    _transferOwnership(shieldedOwner);
  }

  /**
   * @description Add me...
   */
  export circuit renounceOwnership(): [] {
    assertOnlyOwner();
    _transferOwnership(default<Bytes<32>>);
  }

  /**
   * @description Add me...
   */
  export circuit assertOnlyOwner(): [] {
    const caller = own_public_key();
    assert _owner == shieldOwner(caller, _instance as Field as Bytes<32>) "OwnablePK: not owner";
  }

  /**
   * @description Add me...
   */
  export circuit shieldOwner(ownerPK: ZswapCoinPublicKey, instance: Bytes<32>): Bytes<32> {
    return persistent_hash<Vector<3, Bytes<32>>>([pad(32, "OwnablePK:shield:"), instance, ownerPK.bytes]);
  }

  /**
   * @description Add me...
   */
  export circuit _transferOwnership(newOwner: Bytes<32>): [] {
    _pendingOwner = default<Bytes<32>>;
    _instance.increment(1);
    _owner = newOwner;
  }

  /**
   * @description Add me...
   */
  export circuit _proposeOwner(newOwner: ZswapCoinPublicKey): [] {
    assert newOwner != burn_address().left "OwnablePK: new owner cannot be zero";
    const nextInstance = _instance + 1 as Field as Bytes<32>;
    _pendingOwner = shieldOwner(newOwner, nextInstance);
  }
}
