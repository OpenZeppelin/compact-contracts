// SPDX-License-Identifier: MIT

pragma language_version >= 0.16.0;

module Z_OwnablePK {
  import CompactStandardLibrary;

  export ledger _ownerCommitment: Bytes<32>;
  export ledger _instance: Counter;

  export witness offchainNonce(): Bytes<32>;

  export circuit initialize(initCommitment: Bytes<32>): [] {
    assert(initCommitment != default<Bytes<32>>, "Invalid parameters");
    _transferOwnership(initCommitment);
  }

  export circuit owner(): Bytes<32> {
    return _ownerCommitment;
  }

  export circuit transferOwnership(newOwnerCommitment: Bytes<32>): [] {
    assertOnlyOwner();
    assert(newOwnerCommitment != default<Bytes<32>>, "Invalid parameters");
    _transferOwnership(newOwnerCommitment);
  }

  export circuit renounceOwnership(): [] {
    assertOnlyOwner();
    _transferOwnership(default<Bytes<32>>);
  }

  export circuit renounceOwnershipObfuscated(): [] {
    assertOnlyOwner();
    const nonce = offchainNonce();
    const obfuscatedCommitment = persistentHash<Vector<4, Bytes<32>>>(
      [
        pad(32, "Z_OwnablePK:renounced:"),
        default<Bytes<32>>,
        _instance as Field as Bytes<32>,
        nonce
      ]
    );

    _transferOwnership(obfuscatedCommitment);
  }

  export circuit assertOnlyOwner(): [] {
    const caller = ownPublicKey();
    const nonce = offchainNonce();
    assert(
      _ownerCommitment == shieldPK(caller, _instance, nonce
    ), "Forbidden");
  }

  export circuit shieldPK(
    pk: ZswapCoinPublicKey,
    instance: Uint<64>,
    nonce: Bytes<32>
  ): Bytes<32> {
    return persistentHash<Vector<4, Bytes<32>>>(
      [
        pad(32, "Z_OwnablePK:shield:"),
        pk.bytes,
        instance as Field as Bytes<32>,
        nonce
      ]
    );
  }

  export circuit _transferOwnership(newOwnerCommitment: Bytes<32>): [] {
    _instance.increment(1);
    _ownerCommitment = disclose(newOwnerCommitment);
  }
}
