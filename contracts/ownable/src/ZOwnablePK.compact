// SPDX-License-Identifier: MIT

pragma language_version >= 0.16.0;

/**
 * @module ZOwnablePK
 * @description A shielded Ownable library.
 */
module ZOwnablePK {
  import CompactStandardLibrary;
  import "../../node_modules/@openzeppelin-compact/utils/src/Initializable" prefix Initializable_;

  export ledger _ownerCommitment: Bytes<32>;
  export ledger _counter: Counter;
  export sealed ledger _instanceSalt: Bytes<32>;

  export witness secretNonce(): Bytes<32>;

  /**
   * @description Add me!!!
   */
  export circuit initialize(ownerId: Bytes<32>, instanceSalt: Bytes<32>): [] {
    Initializable_initialize();

    assert(ownerId != default<Bytes<32>>, "ZOwnablePK: invalid id");
    _instanceSalt = disclose(instanceSalt);
    _transferOwnership(ownerId);
  }

  /**
   * @description Add me!!!
   */
  export circuit owner(): Bytes<32> {
    Initializable_assertInitialized();
    return _ownerCommitment;
  }

  /**
   * @description Add me!!!
   */
  export circuit transferOwnership(newOwnerId: Bytes<32>): [] {
    Initializable_assertInitialized();

    assertOnlyOwner();
    assert(newOwnerId != default<Bytes<32>>, "ZOwnablePK: invalid id");
    _transferOwnership(newOwnerId);
  }

  /**
   * @description Add me!!!
   */
  export circuit renounceOwnership(): [] {
    Initializable_assertInitialized();

    assertOnlyOwner();
    _ownerCommitment.resetToDefault();
  }

  /**
   * @description Add me!!!
   */
  export circuit assertOnlyOwner(): [] {
    Initializable_assertInitialized();

    const caller = ownPublicKey();
    const nonce = secretNonce();
    const id = persistentHash<Vector<2, Bytes<32>>>([caller.bytes, nonce]);
    assert(_ownerCommitment == _computeOwnerCommitment(id, _counter), "ZOwnablePK: caller is not the owner");
  }

  /**
   * @description Add me!!!
   */
  export circuit _computeOwnerCommitment(
    id: Bytes<32>,
    counter: Uint<64>,
  ): Bytes<32> {
    Initializable_assertInitialized();
    return persistentHash<Vector<4, Bytes<32>>>(
      [
        id,
        _instanceSalt,
        counter as Field as Bytes<32>,
        pad(32, "ZOwnablePK:shield:")
      ]
    );
  }

  /**
   * @description Add me!!!
   */
  export circuit _transferOwnership(newOwnerId: Bytes<32>): [] {
    Initializable_assertInitialized();

    _counter.increment(1);
    _ownerCommitment = _computeOwnerCommitment(disclose(newOwnerId), _counter);
  }
}
