// SPDX-License-Identifier: MIT

pragma language_version >= 0.15.0;

/**
 * @module Utils.
 * @description A library for common utilities used in Compact contracts.
 */
module Utils {
  import CompactStandardLibrary;

  /**
   * @description Returns whether `keyOrAddress` is the zero address.
   *
   * @param {keyOrAddress} - The target value to check, either a ZswapCoinPublicKey or a ContractAddress.
   * @return {Boolean} - Returns true if `keyOrAddress` is zero.
   */
  export pure circuit isKeyOrAddressZero(keyOrAddress: Either<ZswapCoinPublicKey, ContractAddress>): Boolean {
    const zero = pad(32, "");

    if (keyOrAddress.is_left) {
      return keyOrAddress == left<ZswapCoinPublicKey, ContractAddress>(ZswapCoinPublicKey{ zero });
    } else {
      return keyOrAddress == right<ZswapCoinPublicKey, ContractAddress>(ContractAddress{ zero });
    }
  }

  /**
   * @description Returns whether `keyOrAddress` is equal to `other`. Assumes that a ZswapCoinPublicKey 
   * and a ContractAddress can never be equal
   *
   * @param {keyOrAddress} - The target value to check, either a ZswapCoinPublicKey or a ContractAddress.
   * @param {other} - The other value to check, either a ZswapCoinPublicKey or a ContractAddress.
   * @return {Boolean} - Returns true if `keyOrAddress` is is equal to `other`.
   */
  export pure circuit isKeyOrAddressEqual(
    keyOrAddress: Either<ZswapCoinPublicKey, ContractAddress>,
    other: Either<ZswapCoinPublicKey, ContractAddress>
  ): Boolean {
    if (keyOrAddress.is_left && other.is_left) {
      return keyOrAddress.left == other.left;
    } else if (!keyOrAddress.is_left && !other.is_left) {
      return keyOrAddress.right == other.right;
    } else {
      return false;
    }
  }
}
